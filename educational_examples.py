#!/usr/bin/env python3
"""
EXEMPLOS EDUCACIONAIS - CONCEITOS DE PROGRAMA√á√ÉO
===============================================

Este arquivo cont√©m exemplos pr√°ticos e educacionais que demonstram
claramente os conceitos solicitados nos objetivos do projeto.
"""

def exemplo_1_estruturas_simples():
    """
    EXEMPLO 1: ESTRUTURAS DE REPETI√á√ÉO SIMPLES
    ==========================================
    
    Demonstra for e while loops para Torre, Bispo e Rainha
    """
    print("üìö EXEMPLO 1: ESTRUTURAS DE REPETI√á√ÉO SIMPLES")
    print("=" * 50)
    
    # EXEMPLO A: FOR LOOP para Torre (movimentos lineares)
    print("üè∞ TORRE - FOR LOOP para dire√ß√µes:")
    print("directions = [(0,1), (1,0), (0,-1), (-1,0)]")
    print("for dr, dc in directions:")
    print("    # Move na dire√ß√£o at√© encontrar obst√°culo")
    
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    for i, (dr, dc) in enumerate(directions):
        direction_names = ["direita", "baixo", "esquerda", "cima"]
        print(f"  {i+1}. Dire√ß√£o {direction_names[i]}: ({dr}, {dc})")
    
    print()
    
    # EXEMPLO B: WHILE LOOP para movimento cont√≠nuo
    print("‚ôó BISPO - WHILE LOOP para movimento cont√≠nuo:")
    print("while is_valid_position(row, col):")
    print("    if board.get_piece(row, col) is None:")
    print("        moves.append((row, col))")
    print("    else:")
    print("        break")
    print("    row += dr")
    print("    col += dc")
    
    # Simula√ß√£o de movimento diagonal
    print("\nSimula√ß√£o de movimento diagonal:")
    row, col = 3, 3  # Posi√ß√£o inicial
    dr, dc = 1, 1    # Dire√ß√£o diagonal (sudeste)
    moves = []
    
    print(f"Posi√ß√£o inicial: ({row}, {col})")
    print(f"Dire√ß√£o: ({dr}, {dc})")
    
    step = 0
    while step < 4:  # Simula movimento at√© encontrar obst√°culo
        row += dr
        col += dc
        step += 1
        print(f"  Passo {step}: posi√ß√£o ({row}, {col})")
        if step >= 3:  # Simula obst√°culo
            print("  ‚Üí Encontrou obst√°culo, para aqui")
            break
    
    print()


def exemplo_2_loops_aninhados():
    """
    EXEMPLO 2: LOOPS ANINHADOS
    =========================
    
    Demonstra loops aninhados para movimento complexo do Cavalo
    """
    print("üìö EXEMPLO 2: LOOPS ANINHADOS - CAVALO")
    print("=" * 50)
    
    print("‚ôò CAVALO - LOOPS ANINHADOS para movimento em 'L':")
    print()
    
    # ESTRUTURA DOS LOOPS ANINHADOS
    print("ESTRUTURA DOS LOOPS ANINHADOS:")
    print("for distance in [2, -2]:")
    print("    for step in [1, -1]:")
    print("        # Combina√ß√µes geradas:")
    print("        # (distance, step) e (step, distance)")
    print()
    
    print("DEMONSTRA√á√ÉO PR√ÅTICA:")
    print("-" * 30)
    
    # Primeiro loop: dist√¢ncias principais
    for distance in [2, -2]:
        print(f"üîπ Loop externo: distance = {distance}")
        
        # Segundo loop aninhado: passos
        for step in [1, -1]:
            print(f"  üî∏ Loop interno: step = {step}")
            
            # Combina√ß√£o 1: (distance, step)
            combo1 = (distance, step)
            print(f"    ‚Üí Combina√ß√£o 1: {combo1}")
            
            # Combina√ß√£o 2: (step, distance) - perpendicular
            combo2 = (step, distance)
            print(f"    ‚Üí Combina√ß√£o 2: {combo2}")
            
            print(f"    ‚Üí Total: 2 movimentos em 'L'")
        print()
    
    print("RESULTADO: 8 movimentos poss√≠veis em 'L'")
    print("(2 dist√¢ncias √ó 2 passos √ó 2 orienta√ß√µes = 8)")


def exemplo_3_recursividade():
    """
    EXEMPLO 3: RECURSIVIDADE
    =========================
    
    Demonstra recursividade para an√°lise avan√ßada
    """
    print("üìö EXEMPLO 3: RECURSIVIDADE")
    print("=" * 50)
    
    print("üîç RECURSIVIDADE - An√°lise de caminhos:")
    print()
    
    # Exemplo de fun√ß√£o recursiva
    def contar_movimentos_recursivo(profundidade, max_profundidade):
        """
        Fun√ß√£o recursiva que demonstra o conceito
        """
        print(f"  üìç Profundidade {profundidade}")
        
        # Condi√ß√£o de parada
        if profundidade >= max_profundidade:
            print(f"  üõë Parada: profundidade m√°xima ({max_profundidade}) atingida")
            return 1
        
        # Chamada recursiva
        print(f"  üîÑ Chamada recursiva para profundidade {profundidade + 1}")
        resultado = contar_movimentos_recursivo(profundidade + 1, max_profundidade)
        
        print(f"  üìä Retornando: {resultado} movimentos")
        return resultado + 1
    
    print("EXEMPLO DE RECURSIVIDADE:")
    print("-" * 30)
    print("def analisar_movimentos(profundidade):")
    print("    if profundidade >= max_profundidade:")
    print("        return 1")
    print("    return analisar_movimentos(profundidade + 1) + 1")
    print()
    
    print("EXECU√á√ÉO:")
    resultado = contar_movimentos_recursivo(0, 3)
    print(f"\nRESULTADO FINAL: {resultado} movimentos analisados")
    
    print()
    print("CARACTER√çSTICAS DA RECURSIVIDADE:")
    print("‚úì Fun√ß√£o chama a si mesma")
    print("‚úì Condi√ß√£o de parada definida")
    print("‚úì Cada chamada tem par√¢metros diferentes")
    print("‚úì Resultado √© constru√≠do de volta")


def exemplo_4_loops_complexos():
    """
    EXEMPLO 4: LOOPS COMPLEXOS COM M√öLTIPLAS CONDI√á√ïES
    ==================================================
    
    Demonstra loops complexos para an√°lise avan√ßada
    """
    print("üìö EXEMPLO 4: LOOPS COMPLEXOS")
    print("=" * 50)
    
    print("üîç LOOPS COMPLEXOS - An√°lise de seguran√ßa:")
    print()
    
    # Simula√ß√£o de tabuleiro 3x3 para demonstra√ß√£o
    tabuleiro = [
        ['T', 'C', 'B'],
        ['P', 'R', 'P'],
        ['B', 'C', 'T']
    ]
    
    print("TABULEIRO SIMULADO (3x3):")
    for i, linha in enumerate(tabuleiro):
        print(f"  Linha {i}: {linha}")
    print()
    
    print("LOOP COMPLEXO - Verifica√ß√£o de seguran√ßa:")
    print("-" * 40)
    
    pecas_sob_ataque = 0
    total_verificacoes = 0
    
    # LOOP EXTERNO: todas as linhas
    for linha in range(3):
        print(f"üîπ Linha {linha}:")
        
        # LOOP INTERNO: todas as colunas
        for coluna in range(3):
            peca = tabuleiro[linha][coluna]
            print(f"  üî∏ Coluna {coluna}: pe√ßa '{peca}'")
            
            # M√öLTIPLAS CONDI√á√ïES ANINHADAS
            if peca != '.':
                print(f"    ‚Üí Pe√ßa encontrada: {peca}")
                
                # LOOP ADICIONAL: verifica ataques
                ataques = 0
                for linha_ataque in range(3):
                    for coluna_ataque in range(3):
                        peca_ataque = tabuleiro[linha_ataque][coluna_ataque]
                        
                        # M√öLTIPLAS CONDI√á√ïES
                        if (peca_ataque != '.' and 
                            peca_ataque != peca and
                            (linha_ataque != linha or coluna_ataque != coluna)):
                            
                            ataques += 1
                            print(f"      ‚öîÔ∏è  Ataque de {peca_ataque} em ({linha_ataque},{coluna_ataque})")
                
                if ataques > 0:
                    pecas_sob_ataque += 1
                    print(f"    ‚ö†Ô∏è  Pe√ßa {peca} est√° sob {ataques} ataque(s)")
                else:
                    print(f"    ‚úÖ Pe√ßa {peca} est√° segura")
            
            total_verificacoes += 1
    
    print(f"\nRESULTADO DA AN√ÅLISE:")
    print(f"  Total de verifica√ß√µes: {total_verificacoes}")
    print(f"  Pe√ßas sob ataque: {pecas_sob_ataque}")
    print(f"  Pe√ßas seguras: {total_verificacoes - pecas_sob_ataque}")


def exemplo_5_comparacao_conceitos():
    """
    EXEMPLO 5: COMPARA√á√ÉO DOS CONCEITOS
    ====================================
    
    Compara e resume todos os conceitos demonstrados
    """
    print("üìö EXEMPLO 5: COMPARA√á√ÉO DOS CONCEITOS")
    print("=" * 50)
    
    conceitos = [
        {
            "nome": "ESTRUTURAS SIMPLES",
            "tecnica": "for/while",
            "aplicacao": "Torre, Bispo, Rainha",
            "complexidade": "Baixa",
            "exemplo": "for direction in directions:"
        },
        {
            "nome": "LOOPS ANINHADOS", 
            "tecnica": "for dentro de for",
            "aplicacao": "Cavalo",
            "complexidade": "M√©dia",
            "exemplo": "for i in range(n): for j in range(m):"
        },
        {
            "nome": "RECURSIVIDADE",
            "tecnica": "fun√ß√£o chama a si mesma",
            "aplicacao": "An√°lise de caminhos",
            "complexidade": "Alta",
            "exemplo": "def func(n): return func(n-1)"
        },
        {
            "nome": "LOOPS COMPLEXOS",
            "tecnica": "m√∫ltiplas condi√ß√µes",
            "aplicacao": "An√°lise de seguran√ßa",
            "complexidade": "Muito Alta",
            "exemplo": "for i in range(n): if cond1: for j in range(m): if cond2:"
        }
    ]
    
    print("COMPARA√á√ÉO DOS CONCEITOS:")
    print("-" * 50)
    
    for i, conceito in enumerate(conceitos, 1):
        print(f"{i}. {conceito['nome']}")
        print(f"   T√©cnica: {conceito['tecnica']}")
        print(f"   Aplica√ß√£o: {conceito['aplicacao']}")
        print(f"   Complexidade: {conceito['complexidade']}")
        print(f"   Exemplo: {conceito['exemplo']}")
        print()
    
    print("RESUMO EDUCACIONAL:")
    print("-" * 30)
    print("‚úì Estruturas simples: base para movimentos b√°sicos")
    print("‚úì Loops aninhados: essenciais para movimentos complexos")
    print("‚úì Recursividade: poderosa para an√°lise profunda")
    print("‚úì Loops complexos: necess√°rios para valida√ß√µes avan√ßadas")
    print()
    print("üéØ OBJETIVOS ATINGIDOS:")
    print("‚úì Torre, Bispo, Rainha: estruturas simples")
    print("‚úì Cavalo: loops aninhados")
    print("‚úì An√°lise avan√ßada: recursividade + loops complexos")


def main():
    """
    Fun√ß√£o principal que executa todos os exemplos educacionais
    """
    print("üéì EXEMPLOS EDUCACIONAIS - CONCEITOS DE PROGRAMA√á√ÉO")
    print("=" * 60)
    print("Demonstra√ß√£o pr√°tica dos objetivos do projeto")
    print("=" * 60)
    
    try:
        exemplo_1_estruturas_simples()
        print("\n" + "="*60)
        
        exemplo_2_loops_aninhados()
        print("\n" + "="*60)
        
        exemplo_3_recursividade()
        print("\n" + "="*60)
        
        exemplo_4_loops_complexos()
        print("\n" + "="*60)
        
        exemplo_5_comparacao_conceitos()
        
        print("\n" + "="*60)
        print("‚úÖ TODOS OS EXEMPLOS EXECUTADOS COM SUCESSO!")
        print("="*60)
        print("Conceitos demonstrados:")
        print("‚úì Estruturas de repeti√ß√£o simples")
        print("‚úì Loops aninhados para Cavalo")
        print("‚úì Recursividade para an√°lise")
        print("‚úì Loops complexos para valida√ß√µes")
        print("="*60)
        
    except Exception as e:
        print(f"\n‚ùå Erro durante execu√ß√£o: {e}")


if __name__ == "__main__":
    main()
