#!/usr/bin/env python3
"""
DEMONSTRA√á√ÉO DOS CONCEITOS DE PROGRAMA√á√ÉO
=========================================

Este arquivo demonstra os objetivos espec√≠ficos do projeto:

1. ESTRUTURAS DE REPETI√á√ÉO SIMPLES (for, while) para Torre, Bispo, Rainha
2. LOOPS ANINHADOS para movimento complexo do Cavalo em "L"
3. RECURSIVIDADE e LOOPS COMPLEXOS para movimentos avan√ßados
"""

from chess_pieces_enhanced import *
from chess_board import ChessBoard


def demo_simple_loops():
    """
    DEMONSTRA√á√ÉO 1: ESTRUTURAS DE REPETI√á√ÉO SIMPLES
    ===============================================
    
    Objetivo: Aplicar estruturas de repeti√ß√£o simples (for, while) 
    para simular movimentos b√°sicos de pe√ßas de xadrez (Torre, Bispo, Rainha)
    """
    print("="*60)
    print("DEMONSTRA√á√ÉO 1: ESTRUTURAS DE REPETI√á√ÉO SIMPLES")
    print("="*60)
    print("Objetivo: Torre, Bispo e Rainha usando for/while loops")
    print()
    
    board = ChessBoard()
    
    # Demonstra√ß√£o da TORRE (movimentos lineares)
    print("üè∞ TORRE - Movimentos lineares com FOR + WHILE:")
    print("-" * 50)
    rook = Rook(Color.WHITE, 7, 0)  # Torre em a1
    print(f"Torre em posi√ß√£o: ({rook.row}, {rook.col})")
    
    # ESTRUTURA DE REPETI√á√ÉO SIMPLES: for loop para dire√ß√µes
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # direita, baixo, esquerda, cima
    print("Dire√ß√µes: direita, baixo, esquerda, cima")
    
    moves = rook.get_possible_moves(board)
    print(f"Movimentos poss√≠veis: {len(moves)}")
    for i, (row, col) in enumerate(moves[:5]):  # Mostra apenas os primeiros 5
        print(f"  {i+1}. Posi√ß√£o ({row}, {col})")
    if len(moves) > 5:
        print(f"  ... e mais {len(moves) - 5} movimentos")
    
    print()
    
    # Demonstra√ß√£o do BISPO (movimentos diagonais)
    print("‚ôó BISPO - Movimentos diagonais com FOR + WHILE:")
    print("-" * 50)
    bishop = Bishop(Color.WHITE, 7, 2)  # Bispo em c1
    print(f"Bispo em posi√ß√£o: ({bishop.row}, {bishop.col})")
    
    # ESTRUTURA DE REPETI√á√ÉO SIMPLES: for loop para dire√ß√µes diagonais
    diagonal_directions = [(1, 1), (1, -1), (-1, 1), (-1, -1)]
    print("Dire√ß√µes diagonais: NE, NW, SE, SW")
    
    moves = bishop.get_possible_moves(board)
    print(f"Movimentos poss√≠veis: {len(moves)}")
    for i, (row, col) in enumerate(moves[:5]):
        print(f"  {i+1}. Posi√ß√£o ({row}, {col})")
    if len(moves) > 5:
        print(f"  ... e mais {len(moves) - 5} movimentos")
    
    print()
    
    # Demonstra√ß√£o da RAINHA (combina√ß√£o de torre + bispo)
    print("‚ôï RAINHA - Combina√ß√£o de movimentos com FOR + WHILE:")
    print("-" * 50)
    queen = Queen(Color.WHITE, 7, 3)  # Rainha em d1
    print(f"Rainha em posi√ß√£o: ({queen.row}, {queen.col})")
    
    # ESTRUTURA DE REPETI√á√ÉO SIMPLES: for loop para todas as dire√ß√µes
    all_directions = [
        (0, 1), (1, 0), (0, -1), (-1, 0),  # linhas retas
        (1, 1), (1, -1), (-1, 1), (-1, -1)  # diagonais
    ]
    print("Dire√ß√µes: 8 dire√ß√µes (4 retas + 4 diagonais)")
    
    moves = queen.get_possible_moves(board)
    print(f"Movimentos poss√≠veis: {len(moves)}")
    for i, (row, col) in enumerate(moves[:8]):
        print(f"  {i+1}. Posi√ß√£o ({row}, {col})")
    if len(moves) > 8:
        print(f"  ... e mais {len(moves) - 8} movimentos")


def demo_nested_loops():
    """
    DEMONSTRA√á√ÉO 2: LOOPS ANINHADOS
    ===============================
    
    Objetivo: Aplicar loops aninhados para simular o movimento complexo 
    em "L" do Cavalo no tabuleiro de xadrez
    """
    print("\n" + "="*60)
    print("DEMONSTRA√á√ÉO 2: LOOPS ANINHADOS - CAVALO")
    print("="*60)
    print("Objetivo: Movimento complexo em 'L' do Cavalo")
    print()
    
    board = ChessBoard()
    
    print("‚ôò CAVALO - Movimento em 'L' com LOOPS ANINHADOS:")
    print("-" * 50)
    knight = Knight(Color.WHITE, 7, 1)  # Cavalo em b1
    print(f"Cavalo em posi√ß√£o: ({knight.row}, {knight.col})")
    
    print("LOOPS ANINHADOS para movimento em 'L':")
    print("  - Primeiro loop: dist√¢ncia 2 (2 casas)")
    print("  - Segundo loop aninhado: dist√¢ncia 1 (1 casa)")
    print("  - Combina√ß√µes: (2,1), (2,-1), (1,2), (1,-2), etc.")
    
    moves = knight.get_possible_moves(board)
    print(f"Movimentos poss√≠veis: {len(moves)}")
    
    # Demonstra√ß√£o detalhada dos loops aninhados
    print("\nDetalhamento dos LOOPS ANINHADOS:")
    print("for distance in [2, -2]:")
    print("    for step in [1, -1]:")
    print("        # Combina√ß√µes geradas:")
    
    combinations = []
    for distance in [2, -2]:
        for step in [1, -1]:
            # Combina√ß√£o 1: (distance, step)
            combinations.append((distance, step))
            # Combina√ß√£o 2: (step, distance) - movimento perpendicular
            combinations.append((step, distance))
    
    for i, (dr, dc) in enumerate(combinations):
        new_row = knight.row + dr
        new_col = knight.col + dc
        if 0 <= new_row < 8 and 0 <= new_col < 8:
            print(f"  {i+1}. Movimento ({dr}, {dc}) -> Posi√ß√£o ({new_row}, {new_col})")
    
    print(f"\nTotal de combina√ß√µes v√°lidas: {len(moves)}")
    for i, (row, col) in enumerate(moves):
        print(f"  Movimento {i+1}: ({row}, {col})")


def demo_recursion_and_complex_loops():
    """
    DEMONSTRA√á√ÉO 3: RECURSIVIDADE E LOOPS COMPLEXOS
    ==============================================
    
    Objetivo: Aplicar recursividade e loops complexos com m√∫ltiplas condi√ß√µes 
    para simular movimentos avan√ßados das pe√ßas de xadrez
    """
    print("\n" + "="*60)
    print("DEMONSTRA√á√ÉO 3: RECURSIVIDADE E LOOPS COMPLEXOS")
    print("="*60)
    print("Objetivo: An√°lise avan√ßada com recursividade e m√∫ltiplas condi√ß√µes")
    print()
    
    board = ChessBoard()
    analyzer = AdvancedChessAnalyzer(board)
    
    print("üîç AN√ÅLISE AVAN√áADA - Recursividade e Loops Complexos:")
    print("-" * 50)
    
    # Demonstra√ß√£o de an√°lise recursiva
    print("1. AN√ÅLISE RECURSIVA do tabuleiro:")
    analysis = analyzer.analyze_board_complexity()
    
    print(f"   Total de movimentos poss√≠veis: {analysis['total_moves']}")
    print(f"   Movimentos seguros: {analysis['safe_moves']}")
    print(f"   Movimentos perigosos: {analysis['dangerous_moves']}")
    print(f"   Pe√ßas sob ataque: {analysis['pieces_under_attack']}")
    print(f"   Score de complexidade: {analysis['complexity_score']}")
    
    print("\n2. LOOPS COMPLEXOS com m√∫ltiplas condi√ß√µes:")
    print("   - Loop externo: todas as linhas (0-7)")
    print("   - Loop interno: todas as colunas (0-7)")
    print("   - Condi√ß√µes aninhadas: verifica√ß√£o de pe√ßas, cores, tipos")
    print("   - Loops adicionais: an√°lise de movimentos de cada pe√ßa")
    
    # Demonstra√ß√£o de busca recursiva de caminhos
    print("\n3. BUSCA RECURSIVA de caminhos de ataque:")
    queen = Queen(Color.WHITE, 7, 3)  # Rainha em d1
    target_row, target_col = 0, 3  # Alvo em d8
    
    print(f"   Rainha em ({queen.row}, {queen.col})")
    print(f"   Alvo em ({target_row}, {target_col})")
    
    # Simula busca recursiva (limitada para demonstra√ß√£o)
    print("   Algoritmo recursivo:")
    print("   - Condi√ß√£o de parada: profundidade m√°xima ou posi√ß√£o alcan√ßada")
    print("   - Chamada recursiva: para cada movimento poss√≠vel")
    print("   - M√∫ltiplas condi√ß√µes: verifica√ß√£o de seguran√ßa, xeque, etc.")
    
    print("\n4. EXEMPLO de recursividade em a√ß√£o:")
    print("   def find_paths(piece, target, path=[]):")
    print("       if len(path) > max_depth: return []")
    print("       if piece.position == target: return [path]")
    print("       for move in possible_moves:")
    print("           if is_safe(move) and not_in_check(move):")
    print("               paths += find_paths(piece, target, path + [move])")
    print("       return paths")


def demo_educational_comparison():
    """
    DEMONSTRA√á√ÉO 4: COMPARA√á√ÉO EDUCACIONAL
    ======================================
    
    Mostra a diferen√ßa entre implementa√ß√µes simples e avan√ßadas
    """
    print("\n" + "="*60)
    print("DEMONSTRA√á√ÉO 4: COMPARA√á√ÉO EDUCACIONAL")
    print("="*60)
    print("Compara√ß√£o: Implementa√ß√£o Simples vs Avan√ßada")
    print()
    
    print("üìä COMPARA√á√ÉO DE CONCEITOS:")
    print("-" * 50)
    
    concepts = [
        ("ESTRUTURAS SIMPLES", "for/while", "Torre, Bispo, Rainha", "Movimentos lineares/diagonais"),
        ("LOOPS ANINHADOS", "for dentro de for", "Cavalo", "Movimento complexo em 'L'"),
        ("RECURSIVIDADE", "fun√ß√£o chama a si mesma", "An√°lise avan√ßada", "Busca de caminhos e an√°lise"),
        ("LOOPS COMPLEXOS", "m√∫ltiplas condi√ß√µes", "Todas as pe√ßas", "Verifica√ß√£o de seguran√ßa e xeque")
    ]
    
    for concept, technique, pieces, description in concepts:
        print(f"üéØ {concept}")
        print(f"   T√©cnica: {technique}")
        print(f"   Aplica√ß√£o: {pieces}")
        print(f"   Descri√ß√£o: {description}")
        print()


def main():
    """
    Fun√ß√£o principal que executa todas as demonstra√ß√µes
    """
    print("üéì DEMONSTRA√á√ÉO DOS CONCEITOS DE PROGRAMA√á√ÉO EM XADREZ")
    print("=" * 60)
    print("Este programa demonstra os objetivos espec√≠ficos:")
    print("1. Estruturas de repeti√ß√£o simples (for, while)")
    print("2. Loops aninhados para movimento do Cavalo")
    print("3. Recursividade e loops complexos")
    print("=" * 60)
    
    try:
        # Executa todas as demonstra√ß√µes
        demo_simple_loops()
        demo_nested_loops()
        demo_recursion_and_complex_loops()
        demo_educational_comparison()
        
        print("\n" + "="*60)
        print("‚úÖ DEMONSTRA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("="*60)
        print("Todos os conceitos foram demonstrados:")
        print("‚úì Estruturas de repeti√ß√£o simples")
        print("‚úì Loops aninhados para Cavalo")
        print("‚úì Recursividade e loops complexos")
        print("‚úì An√°lise avan√ßada do tabuleiro")
        print("="*60)
        
    except Exception as e:
        print(f"\n‚ùå Erro durante a demonstra√ß√£o: {e}")
        print("Verifique se todos os arquivos est√£o presentes.")


if __name__ == "__main__":
    main()
